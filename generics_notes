Generics in Java are a powerful feature introduced in Java 5 to enable type safety, 
code reusability, and readability. They allow you to write classes, interfaces, 
and methods that can operate on a specified type without committing to a particular data type at compile time.

1. Type Safety
Generics ensure compile-time type checking, preventing runtime ClassCastException
by ensuring that only the specified type of objects can be used.

2. Code Reusability
Generics allow writing a single method or class that works with any data type, improving reusability and reducing redundancy.

Example:

java:
public class Box<T> {
    private T item;
   public void setItem(T item) {
        this.item = item;
    }
public T getItem() {  return item;}
}

Usage:
Box<String> stringBox = new Box<>();
stringBox.setItem("Hello");
System.out.println(stringBox.getItem()); // Output: Hello

Box<Integer> intBox = new Box<>();
intBox.setItem(42);
System.out.println(intBox.getItem()); // Output: 42

3. Elimination of Casting
Generics eliminate the need for explicit type casting, making the code cleaner and less error-prone.

@GetMapping("/user")
public ResponseEntity<User> getUser() {
    User user = new User("John", "Doe", 30); // Create a User object
    return ResponseEntity.status(HttpStatus.OK) // Create a ResponseEntity
                         .body(user);          // Set the body of the response
}

what is ResponseEntity and <User> in the above ??
1. What is ResponseEntity?
ResponseEntity is a class in the Spring Framework (org.springframework.http.ResponseEntity) that represents the entire HTTP response. 
It allows you to specify:

The HTTP status code (e.g., 200 OK, 404 NOT FOUND).
The response headers.
The response body.

Purpose: ResponseEntity provides fine-grained control over the HTTP response that is returned to the client, allowing you to customize it as needed.

2. What is <User>?
The <User> is a generic type parameter for ResponseEntity. It specifies the type of the response body.***

In this case:

User is a custom Java class (defined separately).
It means that the body of the ResponseEntity will contain an object of type User.****


In the provided code:

1. What is ResponseEntity?
ResponseEntity is a class in the Spring Framework (org.springframework.http.ResponseEntity) that represents the entire HTTP response. It allows you to specify:

The HTTP status code (e.g., 200 OK, 404 NOT FOUND).
The response headers.
The response body.
Purpose: ResponseEntity provides fine-grained control over the HTTP response that is returned to the client, allowing you to customize it as needed.

2. What is <User>?
The <User> is a generic type parameter for ResponseEntity. It specifies the type of the response body.

In this case:

User is a custom Java class (defined separately).
It means that the body of the ResponseEntity will contain an object of type User.
-------------------------------------------------------------------------------------------------
How It Works in the Code:
java
public ResponseEntity<User> getUser() {
    User user = new User("John", "Doe", 30); // Create a User object
    return ResponseEntity.status(HttpStatus.OK) // Set status code to 200 OK
                         .body(user);          // Set the response body to the User object
}
ResponseEntity<User>:

Specifies that the response will contain an object of type User.
Returning the Response:

The ResponseEntity object is returned with:****
Status Code: HttpStatus.OK (200 OK).
Body: The user object (User instance).
Spring automatically serializes the User object to JSON (or another format) for the client.










